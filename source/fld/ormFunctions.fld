<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE func-lib PUBLIC "-//Railo//DTD CFML Function Library 1.0//EN"
	"dtd/web-cfmfunctionlibrary_1_0.dtd">
<!-- http://www.getrailo.com/j2ee/dtd/web-jspfunctionlibrary_1_0.dtd -->
<func-lib>
	<flib-version>1.00</flib-version>
	<short-name>Hibernate-extension</short-name>
	<uri>https://github.com/lucee/extension-hibernate</uri>
	<display-name>Hibernate</display-name>
	<description>
		Functions to interact with Hibernate
	</description>

	<!-- EntityDelete -->
	<function>
		<name>EntityDelete</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.orm.functions.EntityDelete</class>
		<description>Deletes the record from the database for the specified entity.
EntityDelete(entity)</description>
		<argument>
			<name>name</name>
			<type>object</type>
			<required>Yes</required>
		<description>Name of the entity being deleted.</description>
    </argument>
		<return>
			<type>void</type>
		</return>
	</function>
	
	<!-- EntityLoad -->
	<function>
		<name>entityLoad</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.orm.functions.EntityLoad</class>
		<description>Loads and returns an array of entities of the specified entityName.
EntityLoad (entityName, filterCriteria [,unique]
EntityLoad(entityName, filterCriteria, sortOrder [, options])</description>
		<argument>
			<name>name</name>
			<type>string</type>
			<required>Yes</required>
		<description>Name of the entity to be loaded.</description>
    </argument>
		<argument>
			<name>idOrFilter</name>
			<alias>id,filter</alias>
			<type>any</type>
			<required>no</required>
		<description>The primary key value of the entity that must be loaded or Key-value pair (Struct) of property names and values. 
		If there are more than one key-value pair, then the AND operator is used.If specified, loads and returns an array of entities of the specified entity name that matches the filterCriteria.</description>
    </argument>
		<argument>
			<name>uniqueOrOrder</name>
			<alias>unique,order</alias>
			<type>any</type>
			<required>no</required>
		<description>when the second argument is an id then this argument defines the boolean "unique" otherwise it defines the order.
		
- unique:
If unique is set to true, then the entity is returned.
If you are sure that only one record exists that matches this filterCriteria, then you can specify unique=true, so that a single entity is returned instead of an array.
If you set unique=true and multiple records are returned, then an exception occurs.

- order:
String used to specify the sortOrder of the entities that are returned.If specified, loads and returns an array of entities that satisfy the filterCriteria sorted as specified by the sortOrder.
		
		</description>
    </argument>
		<argument>
			<name>options</name>
			<type>any</type>
			<required>no</required>
		<description>
The following options to customize the output (only used when second argument is "id"):
- ignoreCase: Ignores the case of sort order when set to true. Use only if you specify the sortOrder parameter.
- offset: Specifies the position from which to retrieve the objects.
- maxResults: Specifies the maximum number of objects to be retrieved.
- cacheable: Whether the result has to be cached in the secondary cache. Default is false.
- cacheName: Name of the cache in secondary cache.
- timeout: Specifies the timeout value (in seconds) for the query.
		</description>
    </argument>
		<return>
			<type>any</type>
		</return>
	</function>
	
	<!-- EntityLoadByPK -->
	<function>
		<name>EntityLoadByPK</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.orm.functions.EntityLoadByPK</class>
		<description>Loads and returns an array of objects for given primary key.</description>
		<argument>
			<name>name</name>
			<type>string</type>
			<required>Yes</required>
		<description>Name of the entity to be loaded.</description>
    </argument>
		<argument>
			<name>id</name>
			<type>any</type>
			<required>yes</required>
		<description>The primary key value of the entity that must be loaded</description>
    </argument>
		<argument>
			<name>unique</name>
			<type>boolean</type>
			<required>no</required>
		<description>If unique is set to true, then the entity is returned.
If you are sure that only one record exists that matches this filtercriteria, then you can specify unique=true, so that a single entity is returned instead of an array.
If you set unique=true and multiple records are returned, then an exception occurs.</description>
    </argument>
		<return>
			<type>any</type>
		</return>
	</function>
	
	<!-- EntityLoadByExample -->
	<function>
		<name>EntityLoadByExample</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.orm.functions.EntityLoadByExample</class>
		<description>Loads and returns an array of objects that match the sample entity.
entityLoadByExample(sampleEntity,[unique])</description>
		<argument>
			<name>sampleEntity</name>
			<type>object</type>
			<required>yes</required>
		<description>Name of the sample entity that is used to match and filter similar entities to load.</description>
    </argument>
		<argument>
			<name>unique</name>
			<type>boolean</type>
			<required>no</required>
		<description>If unique is set to true, then the entity is returned.
If you are sure that only one record exists that matches this filtercriteria, then you can specify unique=true, so that a single entity is returned instead of an array.
If you set unique=true and multiple records are returned, then an exception occurs.</description>
    </argument>
		<return>
			<type>any</type>
		</return>
	</function>
	
	<!-- EntityMerge -->
	<function>
		<name>EntityMerge</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.orm.functions.EntityMerge</class>
		<description>Attaches given entity to current ORM session</description>
		<argument>
			<name>entity</name>
			<type>any</type>
			<required>yes</required>
		<description>The entity that must be attached to the ORM session.</description>
    </argument>
		<return>
			<type>any</type>
		</return>
	</function>
	
	<!-- EntityNew -->
	<function>
		<name>EntityNew</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.orm.functions.EntityNew</class>
		<description>Creates a new instance of the persistent CFC with the entity name that you provide.</description>
		<argument>
			<name>entityName</name>
			<type>string</type>
			<required>yes</required>
			<description>Name of the instance being created.</description>
    	</argument>
		<argument>
			<name>properties</name>
			<type>struct</type>
			<required>no</required>
			<description>a struct containing data to populate the entity properties.</description>
    	</argument>
		<return>
			<type>any</type>
		</return>
	</function>
	
	<!-- EntityNameArray -->
	<function>
		<name>EntityNameArray</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.orm.functions.EntityNameArray</class>
		<description>return all loaded entities as array</description>
		<return>
			<type>array</type>
		</return>
	</function>
	
	<!-- EntityNameList -->
	<function>
		<name>EntityNameList</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.orm.functions.EntityNameList</class>
		<description>return all loaded entities as string list</description>
		<argument>
			<name>delimiter</name>
			<type>string</type>
			<required>no</required>
		<description>delimiter used for the list</description>
    </argument>
		<return>
			<type>string</type>
		</return>
	</function>
	
	<!-- EntityReload -->
	<function>
		<name>EntityReload</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.orm.functions.EntityReload</class>
		<description>Reloads data for an entity that is already loaded.</description>
		<argument>
			<name>entity</name>
			<type>object</type>
			<required>yes</required>
		<description>name of the entity</description>
    </argument>
		<return>
			<type>void</type>
		</return>
	</function>
	
	<!-- EntitySave -->
	<function>
		<name>EntitySave</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.orm.functions.EntitySave</class>
		<description>Saves or updates data of the entity and all related entities to the database.
EntitySave(entity, [forceInsert])</description>
		<argument>
			<name>entity</name>
			<type>object</type>
			<required>yes</required>
		<description>Name of the entity that must be saved in the database.</description>
    </argument>
		<argument>
			<name>forceInsert</name>
			<type>boolean</type>
			<required>no</required>
		<description>If true, then Lucee always tries to insert the entity as a new record.</description>
    </argument>
		<return>
			<type>void</type>
		</return>
	</function>
	
	<!-- EntityToQuery -->
	<function>
		<name>EntityToQuery</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.orm.functions.EntityToQuery</class>
		<description>Converts the input entity object or the input array of entity objects to a query object.</description>
		<argument>
			<name>entity</name>
			<type>object</type>
			<required>yes</required>
		<description>entity or array of entities</description>
    </argument>
		<argument>
			<name>name</name>
			<type>string</type>
			<required>no</required>
		<description>name of the entities</description>
    </argument>
		<return>
			<type>query</type>
		</return>
	</function>


	<!-- ORMExecuteQuery -->
	<function>
		<name>ORMExecuteQuery</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.orm.functions.ORMExecuteQuery</class>
		<description>Runs the HQL on the default data source specified for the application.</description>
		<argument>
			<name>hql</name>
			<type>string</type>
			<required>yes</required>
		<description></description>
    </argument>
		<argument>
			<name>paramsOrUnique</name>
			<alias>params</alias>
			<type>any</type>
			<required>no</required>
		<description></description>
    </argument>
		<argument>
			<name>uniqueOrQueryOptions</name>
			<alias>unique</alias>
			<type>any</type>
			<required>no</required>
		<description></description>
    </argument>
		<argument>
			<name>queryOptions</name>
			<type>any</type>
			<required>no</required>
		<description></description>
    </argument>
		<return>
			<type>any</type>
		</return>
	</function>
	<!-- ORMClearSession -->
	<function>
		<name>ORMClearSession</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.orm.functions.ORMClearSession</class>
		<description>Removes all the entities that are loaded or created in the session. This clears the first level cache and removes the objects that are not yet saved to the database.</description>
		<argument>
			<name>datasource</name>
			<type>string</type>
			<required>no</required>
			<description>datasource used for the session, if nor defined the datasource defined in application.cfc/cfapplication is used.</description>
		</argument>
		<return>
			<type>void</type>
		</return>
	</function>
	<!-- ORMCloseSession -->
	<function>
		<name>ORMCloseSession</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.orm.functions.ORMCloseSession</class>
		<description>Closes the current ORM session.</description>
		<argument>
			<name>datasource</name>
			<type>string</type>
			<required>no</required>
			<description>datasource used for the session, if nor defined the datasource defined in application.cfc/cfapplication is used.</description>
		</argument>
		<return>
			<type>void</type>
		</return>
	</function>
	<!-- ORMCloseAllSession -->
	<function>
		<name>ORMCloseAllSessions</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.orm.functions.ORMCloseAllSessions</class>
		<description>Closes all ORM session.</description>
		<return>
			<type>void</type>
		</return>
	</function>
	<!-- ORMEvictCollection -->
	<function>
		<name>ORMEvictCollection</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.orm.functions.ORMEvictCollection</class>
		<description>This will remove all the entries with the specified relation/collection name in the specified component. 
ormEvictCollection(componentName,relationName,[id])</description>
		
		<argument>
			<name>entityName</name>
			<type>String</type>
			<required>yes</required>
		<description></description>
    </argument>
		<argument>
			<name>collectionName</name>
			<type>String</type>
			<required>yes</required>
		<description></description>
    </argument>
		<argument>
			<name>primaryKey</name>
			<type>String</type>
			<required>no</required>
		<description></description>
    </argument>
		
		<return>
			<type>void</type>
		</return>
	</function>
	<!-- ORMEvictEntity -->
	<function>
		<name>ORMEvictEntity</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.orm.functions.ORMEvictEntity</class>
		<description>This will remove all the entries for the specified component name from the entity cache.
ormEvictEntity(componentName,[id])</description>
		
		<argument>
			<name>entityName</name>
			<type>String</type>
			<required>yes</required>
		<description></description>
    </argument>
		<argument>
			<name>primaryKey</name>
			<type>String</type>
			<required>no</required>
		<description></description>
    </argument>
		
		<return>
			<type>void</type>
		</return>
	</function>
	<!-- ORMEvictQueries -->
	<function>
		<name>ORMEvictQueries</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.orm.functions.ORMEvictQueries</class>
		<description>This will remove all the queries from the named query cache. 
If name is not specified, all queries from default cache will be removed.
ormEvictQueries([cacheName])</description>
		<argument>
			<name>cacheName</name>
			<alias>cache,region</alias>
			<type>String</type>
			<required>no</required>
			<description></description>
    	</argument>
    	<argument>
			<name>datasource</name>
			<type>string</type>
			<required>no</required>
			<description>datasource used for the session, if nor defined the datasource defined in application.cfc/cfapplication is used.</description>
		</argument>
		<return>
			<type>void</type>
		</return>
	</function>
	<!-- ORMFlush -->
	<function>
		<name>ORMFlush</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.orm.functions.ORMFlush</class>
		<description>Flushes the current ORM session. ORMFlush flushes all the pending CRUD operations in that request. Any changes made in the objects, in the current ORM session, are saved to the database.</description>
		<argument>
			<name>datasource</name>
			<type>string</type>
			<required>no</required>
			<description>datasource used for the session, if nor defined the datasource defined in application.cfc/cfapplication is used.</description>
		</argument>
		<return>
			<type>void</type>
		</return>
	</function>
	<!-- ORMGetSession -->
	<function>
		<name>ORMGetSession</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.orm.functions.ORMGetSession</class>
		<description>Returns the current ORM session</description>
		<argument>
			<name>datasource</name>
			<type>string</type>
			<required>no</required>
			<description>datasource used for the session, if nor defined the datasource defined in application.cfc/cfapplication is used.</description>
		</argument>
		<return>
			<type>object</type>
		</return>
	</function>
	<!-- ORMGetSessionFactory -->
	<function>
		<name>ORMGetSessionFactory</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.orm.functions.ORMGetSessionFactory</class>
		<description>Returns ORM session factory instance</description>
		<argument>
			<name>datasource</name>
			<type>string</type>
			<required>no</required>
			<description>datasource used for the session, if nor defined the datasource defined in application.cfc/cfapplication is used.</description>
		</argument>
		<return>
			<type>object</type>
		</return>
	</function>
	<!-- ORMReload -->
	<function>
		<name>ORMReload</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.orm.functions.ORMReload</class>
		<description>Returns ORM session factory instance</description>
		<return>
			<type>void</type>
		</return>
	</function>
	
</func-lib>